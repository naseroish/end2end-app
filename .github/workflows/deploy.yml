name: 🚀 Deploy Three-Tier Application to Azure Container Apps

on:
  workflow_dispatch:

permissions:
  contents: read
  actions: read
  checks: write
  pull-requests: write
  id-token: write

env:
  ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
  ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
  ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
  # Terraform Variables from JSON secret
  TF_VAR_subscription_id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  TF_VAR_resource_group_name: ${{ fromJson(secrets.TF_VARS).resource_group_name }}
  TF_VAR_location: ${{ fromJson(secrets.TF_VARS).location }}
  TF_VAR_vnet_name: ${{ fromJson(secrets.TF_VARS).vnet_name }}
  TF_VAR_address_space: ${{ toJson(fromJson(secrets.TF_VARS).address_space) }}
  TF_VAR_subnet: ${{ toJson(fromJson(secrets.TF_VARS).subnet) }}
  TF_VAR_log_analytics_workspace_name: ${{ fromJson(secrets.TF_VARS).log_analytics_workspace_name }}
  TF_VAR_container_app_environment_name: ${{ fromJson(secrets.TF_VARS).container_app_environment_name }}
  TF_VAR_container_apps: ${{ toJson(fromJson(secrets.TF_VARS).container_apps) }}
  TF_VAR_tags: ${{ toJson(fromJson(secrets.TF_VARS).tags) }}
  TF_VAR_sql_server_name: ${{ fromJson(secrets.TF_VARS).sql_server_name }}
  TF_VAR_sql_database_name: ${{ fromJson(secrets.TF_VARS).sql_database_name }}
  TF_VAR_sql_admin_username: ${{ fromJson(secrets.TF_VARS).sql_admin_username }}
  TF_VAR_sql_admin_password: ${{ secrets.SQL_ADMIN_PASSWORD }}

jobs:
  # Job 1: Deploy Infrastructure
  infrastructure:
    name: 🏗️ Deploy Infrastructure
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./terraform
    outputs:
      resource_group: ${{ steps.outputs.outputs.resource_group }}
      
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🔧 Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.7.3
        terraform_wrapper: false

    - name: 🔐 Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: 🏗️ Terraform Init
      run: terraform init

    - name: 🔍 Terraform Validate
      run: terraform validate

    - name: 📋 Terraform Plan
      run: terraform plan -out=tfplan

    - name: 🚀 Terraform Apply
      if: github.event.inputs.action != 'destroy'
      run: terraform apply -auto-approve tfplan

    - name: 💥 Terraform Destroy
      if: github.event.inputs.action == 'destroy'
      run: terraform destroy -auto-approve

    - name: 📤 Get Terraform Outputs
      id: outputs
      if: github.event.inputs.action != 'destroy'
      run: |
        echo "resource_group=$(terraform output -raw resource_group_name)" >> $GITHUB_OUTPUT

  # Job 2: Build & Deploy Application
  deploy:
    name: 🚀 Deploy Application
    needs: infrastructure
    runs-on: ubuntu-latest
    if: github.event.inputs.action != 'destroy'

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🔐 Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: 🔑 Login to Docker Hub
      run: |
        echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login --username "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

    - name: 🏷️ Generate Image Tags
      id: meta
      run: |
        echo "frontend_tag=${{ secrets.DOCKERHUB_USERNAME }}/ecommerce-frontend:latest" >> $GITHUB_OUTPUT
        echo "backend_tag=${{ secrets.DOCKERHUB_USERNAME }}/ecommerce-backend:latest" >> $GITHUB_OUTPUT

    - name: 🔨 Build & Push Frontend Image
      run: |
        docker build -t ${{ steps.meta.outputs.frontend_tag }} ./ecommerce-app-frontend
        docker push ${{ steps.meta.outputs.frontend_tag }}

    - name: 🔨 Build & Push Backend Image
      run: |
        docker system prune -f
        docker build --no-cache --pull -f ./ecommerce-app-backend/Dockerfile.new -t ${{ steps.meta.outputs.backend_tag }} ./ecommerce-app-backend
        docker push ${{ steps.meta.outputs.backend_tag }}

    - name: � Get Container App URLs
      id: urls
      run: |
        # Get the FQDNs dynamically
        BACKEND_FQDN=$(az containerapp show --name backend-app --resource-group ${{ needs.infrastructure.outputs.resource_group }} --query "properties.configuration.ingress.fqdn" -o tsv)
        FRONTEND_FQDN=$(az containerapp show --name frontend-app --resource-group ${{ needs.infrastructure.outputs.resource_group }} --query "properties.configuration.ingress.fqdn" -o tsv)
        
        echo "backend_url=https://$BACKEND_FQDN" >> $GITHUB_OUTPUT
        echo "frontend_url=https://$FRONTEND_FQDN" >> $GITHUB_OUTPUT
        
        echo "Backend URL: https://$BACKEND_FQDN"
        echo "Frontend URL: https://$FRONTEND_FQDN"

    - name: 🚀 Deploy Backend Container App
      run: |
        # Update the container app with Docker Hub image
        az containerapp update \
          --name backend-app \
          --resource-group ${{ needs.infrastructure.outputs.resource_group }} \
          --image ${{ steps.meta.outputs.backend_tag }} \
          --set-env-vars \
            PORT=3001 \
            NODE_ENV=production \
            CORS_ORIGIN="${{ steps.urls.outputs.frontend_url }}" \
            DB_SERVER="${{ secrets.DB_SERVER }}" \
            DB_NAME="${{ secrets.DB_NAME }}" \
            DB_USER="${{ secrets.DB_USER }}" \
            DB_PASSWORD="${{ secrets.SQL_ADMIN_PASSWORD }}" \
            DB_ENCRYPT=true \
            DB_TRUST_SERVER_CERTIFICATE=false \
            DB_CONNECTION_TIMEOUT=30000 \
            JWT_SECRET="${{ secrets.JWT_SECRET }}" \
            JWT_EXPIRES_IN=7d \
            RATE_LIMIT_WINDOW_MS=900000 \
            RATE_LIMIT_MAX_REQUESTS=100
            
        echo "✅ Backend deployment completed"

    - name: 🚀 Deploy Frontend Container App
      run: |
        # Update the container app with Docker Hub image
        az containerapp update \
          --name frontend-app \
          --resource-group ${{ needs.infrastructure.outputs.resource_group }} \
          --image ${{ steps.meta.outputs.frontend_tag }} \
          --set-env-vars \
            NODE_ENV=production \
            REACT_APP_API_URL="${{ steps.urls.outputs.backend_url }}/api"
            
        echo "✅ Frontend deployment completed"

    - name: ⏳ Wait for Deployment
      run: |
        echo "Waiting for container apps to update..."
        sleep 60

    - name: 🔍 Test Application
      run: |
        echo "## 🎉 Application Deployed Successfully!" >> $GITHUB_STEP_SUMMARY
        echo "### 📋 Deployment Details:" >> $GITHUB_STEP_SUMMARY
        echo "- **Frontend Image:** \`${{ steps.meta.outputs.frontend_tag }}\`" >> $GITHUB_STEP_SUMMARY
        echo "- **Backend Image:** \`${{ steps.meta.outputs.backend_tag }}\`" >> $GITHUB_STEP_SUMMARY
        echo "- **Deployment Time:** $(date)" >> $GITHUB_STEP_SUMMARY
        echo "- **Frontend URL:** ${{ steps.urls.outputs.frontend_url }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Backend URL:** ${{ steps.urls.outputs.backend_url }}" >> $GITHUB_STEP_SUMMARY
        
        # Test health endpoints
        echo "### 🔍 Health Checks:" >> $GITHUB_STEP_SUMMARY
        
        # Extract just the hostname from the frontend URL for testing
        FRONTEND_FQDN=$(echo "${{ steps.urls.outputs.frontend_url }}" | sed 's|https://||')
        
        if curl -f "${{ steps.urls.outputs.frontend_url }}" > /dev/null 2>&1; then
          echo "- **Frontend Health:** ✅ Healthy" >> $GITHUB_STEP_SUMMARY
        else
          echo "- **Frontend Health:** ⚠️ Not responding (may still be starting)" >> $GITHUB_STEP_SUMMARY
        fi
        
        if curl -f "${{ steps.urls.outputs.backend_url }}/health" > /dev/null 2>&1; then
          echo "- **Backend Health:** ✅ Healthy" >> $GITHUB_STEP_SUMMARY
        else
          echo "- **Backend Health:** ⚠️ Not responding (may still be starting)" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "### 🎯 Next Steps:" >> $GITHUB_STEP_SUMMARY
        echo "1. Visit the frontend URL to test the application" >> $GITHUB_STEP_SUMMARY
        echo "2. Try the signup/login functionality" >> $GITHUB_STEP_SUMMARY
        echo "3. Check the products page to verify backend connectivity" >> $GITHUB_STEP_SUMMARY